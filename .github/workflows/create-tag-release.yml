name: Create Tag and Release changelog

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'New release tag (e.g., odh-v2.35)'
        required: true
        type: string
      next_odh_tag:
        description: 'Next development tag (e.g., odh-v2.36)'
        required: true
        type: string
    # Note: This workflow assumes the release tag and image tags are in sync.
    #       'tag_name' is used to create the release and as the value to find in files.
    #       'next_odh_tag' provides the new value to set.

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  fetch-tag:
    runs-on: ubuntu-latest
    outputs:
      old_tag: ${{ steps.get_tag.outputs.old_tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          echo "old_tag_name=$(git ls-remote --tags origin | awk -F'/' '{print $3}' | grep -v '{}' | sort -V | tail -n1)" >> $GITHUB_OUTPUT
      
      - name: print tag
        id: print_tag
        run: | 
          echo "Old Tag=${{ steps.get_tag.outputs.old_tag_name }}"
          echo "NEW_TAG=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
          echo "$(basename ${{ github.ref }})"
      
      - name: Check if tag exists
        id: check_tag
        run: |
          import sys
          import subprocess
          tag_name = "${{ github.event.inputs.tag_name }}"
          command = ['git', 'tag', '-l', tag_name]
          output = subprocess.check_output(command, stderr=subprocess.STDOUT)
          if output.decode() != "":
            print(f"Error: Tag '{tag_name}' already exists.", file=sys.stderr)
            sys.exit(1)
          else:
            print(f"Tag '{tag_name}' does not exists.")
        shell: python
        continue-on-error: false

      - name: Create Tag
        id: create_tag
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag -a ${{ github.event.inputs.tag_name }} -m "Prepare for ODH release ${{ github.event.inputs.tag_name }}"
          git push origin ${{ github.event.inputs.tag_name }}

  changelog:
    name: Changelog
    needs: fetch-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ github.token }}
          tag_name: ${{ github.event.inputs.tag_name }}
          prerelease: false
          draft: false
          files: bin/*
          generate_release_notes: true
          name: ${{ github.event.inputs.tag_name }}

  bump-odh-tag:
    name: Bump ODH Tag for Next Release
    runs-on: ubuntu-latest
    needs: changelog
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Update odh-mm-rest-proxy-push.yaml with next ODH tag
        run: |
          CURRENT_TAG="${{ github.event.inputs.tag_name }}"
          NEXT_TAG="${{ github.event.inputs.next_odh_tag }}"
          
          echo "Updating ODH tag from $CURRENT_TAG to $NEXT_TAG..."
          
          # Using sed to replace the current ODH tag with the next one,
          # anchored to the image name to prevent over-matching.
          sed -i "s|rest-proxy:${CURRENT_TAG}|rest-proxy:${NEXT_TAG}|g" .tekton/odh-mm-rest-proxy-push.yaml
          
          echo "Update complete."
          
      - name: Commit and Push Changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .tekton/odh-mm-rest-proxy-push.yaml
          
          # Check for changes before committing
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "No changes to commit. Exiting."
          else
            git commit -m "chore(konflux): Bump ODH release tag to ${{ github.event.inputs.next_odh_tag }}"
            git push
          fi